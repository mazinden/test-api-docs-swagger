openapi: 3.0.0
info:
  title: Пример API для работы с пользователями
  description: "API для создания, получения и удаления пользователей."
  termsOfService: https://example.com/terms
  contact:
    name: Имя контактного лица
    email: contact@example.com
  license:
    name: Лицензия API
    url: https://example.com/license
  version: 0.0.1
externalDocs:
  description: Подробная документация по API
  url: https://example.com/docs
servers:
- url: http://localhost:8080
  description: Основной сервер
- url: http://localhost:8080/test
  description: Тестовый сервер
security:
- api_key: []
tags:
- name: users
  description: Операции с пользователями
paths:
  /users:
    get:
      tags:
      - users
      summary: Получить список всех пользователей
      operationId: usersGET
      responses:
        "200":
          description: Список пользователей успешно получен
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/user'
                x-content-type: application/json
              example:
              - id: 1
                name: Анна
                email: anna@example.com
              - id: 2
                name: Иван
                email: ivan@example.com
      x-swagger-router-controller: Users
    post:
      tags:
      - users
      summary: Создать нового пользователя
      operationId: usersPOST
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/create_user'
            example:
              name: Новый Пользователь
              email: newuser@example.com
        required: true
      responses:
        "201":
          description: Пользователь успешно создан
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/user'
              example:
                id: 3
                name: Новый Пользователь
                email: newuser@example.com
        "400":
          description: Неверный запрос (неполные или некорректные данные)
        "500":
          description: Внутренняя ошибка сервера
      x-swagger-router-controller: Users
  /users/{id}:
    get:
      tags:
      - users
      summary: Получение пользователя по id
      operationId: usersIdGET
      parameters:
      - name: id
        in: path
        description: Уникальный идентификатор пользователя
        required: true
        style: simple
        explode: false
        schema:
          type: integer
      responses:
        "200":
          description: Информация о пользователе успешно получена
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/user'
              example:
                id: 1
                name: Анна
                email: anna@example.com
        "404":
          description: Пользователь не найден
        "500":
          description: Внутренняя ошибка сервера
      x-swagger-router-controller: Users
    delete:
      tags:
      - users
      summary: Удалить пользователя
      operationId: usersIdDELETE
      parameters:
      - name: id
        in: path
        required: true
        style: simple
        explode: false
        schema:
          type: integer
      responses:
        "204":
          description: Пользователь успешно удален
        "404":
          description: Пользователь не найден
        "500":
          description: Внутренняя ошибка сервера
      x-swagger-router-controller: Users
components:
  schemas:
    user:
      required:
      - email
      - id
      - name
      type: object
      properties:
        id:
          type: integer
          format: int64
        name:
          type: string
        email:
          type: string
      example:
        name: name
        id: 0
        email: email
    create_user:
      required:
      - email
      - name
      type: object
      properties:
        name:
          type: string
        email:
          type: string
  securitySchemes:
    api_key:
      type: apiKey
      name: Authorization
      in: header
